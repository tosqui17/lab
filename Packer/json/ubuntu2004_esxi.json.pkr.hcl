
variable "box_basename" {
  type    = string
  default = "ubuntu-20.04"
}

variable "cpus" {
  type    = string
  default = "2"
}

variable "disk_size" {
  type    = string
  default = "20536"
}

variable "esxi_datastore" {
  type    = string
  default = ""
}

variable "esxi_host" {
  type    = string
  default = ""
}

variable "esxi_password" {
  type    = string
  default = ""
}

# could not parse template for following block: "template: hcl2_upgrade:4: function \"vault\" not defined"

variable "esxi_username" {
  type    = string
  default = "{{ vault `/packer/esxi` `username` }}"
}

variable "guest_additions_url" {
  type    = string
  default = ""
}

variable "headless" {
  type    = string
  default = "false"
}

variable "iso_checksum" {
  type    = string
  default = "sha256:f11bda2f2caed8f420802b59f382c25160b114ccc665dbac9c5046e7fceaced2"
}

variable "memory" {
  type    = string
  default = "4096"
}

variable "name" {
  type    = string
  default = "ubuntu-20.04"
}

variable "no_proxy" {
  type    = string
  default = "${env("no_proxy")}"
}

variable "preseed_path" {
  type    = string
  default = "preseed.cfg"
}

variable "template" {
  type    = string
  default = "ubuntu-20.04-amd64"
}

variable "version" {
  type    = string
  default = "TIMESTAMP"
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

locals {
  build_timestamp = "${legacy_isotime("20060102150405")}"
  http_directory  = "${path.root}/http"
}

source "vmware-iso" "autogenerated_1" {
  boot_command            = ["<esc><wait>", "<esc><wait>", "<enter><wait>", "/install/vmlinuz<wait>", " auto<wait>", " console-setup/ask_detect=false<wait>", " console-setup/layoutcode=us<wait>", " console-setup/modelcode=pc105<wait>", " debconf/frontend=noninteractive<wait>", " debian-installer=en_US.UTF-8<wait>", " fb=false<wait>", " initrd=/install/initrd.gz<wait>", " kbd-chooser/method=us<wait>", " keyboard-configuration/layout=USA<wait>", " keyboard-configuration/variant=USA<wait>", " locale=en_US.UTF-8<wait>", " netcfg/get_domain=vm<wait>", " netcfg/get_hostname=vagrant<wait>", " grub-installer/bootdev=/dev/sda<wait>", " preseed/url=https://ping.detectionlab.network/preseed.cfg<wait>", " -- <wait>", "<enter><wait>"]
  boot_wait               = "15s"
  cpus                    = "${var.cpus}"
  disk_size               = "${var.disk_size}"
  guest_os_type           = "ubuntu-64"
  http_directory          = "${local.http_directory}"
  insecure_connection     = true
  iso_checksum            = "${var.iso_checksum}"
  iso_url                 = "http://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/ubuntu-20.04.1-legacy-server-amd64.iso"
  keep_registered         = true
  memory                  = "${var.memory}"
  pause_before_connecting = "1m"
  remote_datastore        = "${var.esxi_datastore}"
  remote_host             = "${var.esxi_host}"
  remote_password         = "${var.esxi_password}"
  remote_type             = "esx5"
  remote_username         = "${var.esxi_username}"
  shutdown_command        = "echo 'vagrant' | sudo -S shutdown -P now"
  skip_export             = true
  ssh_password            = "vagrant"
  ssh_port                = 22
  ssh_timeout             = "10000s"
  ssh_username            = "vagrant"
  tools_upload_flavor     = "linux"
  vm_name                 = "Ubuntu2004"
  vmx_data = {
    "cpuid.coresPerSocket"           = "1"
    "ethernet0.networkName"          = "${var.esxi_network_with_dhcp_and_internet}"
    "ethernet0.pciSlotNumber"        = "32"
    "time.synchronize.continue"      = "0"
    "time.synchronize.restore"       = "0"
    "time.synchronize.resume.disk"   = "0"
    "time.synchronize.resume.host"   = "0"
    "time.synchronize.shrink"        = "0"
    "time.synchronize.tools.enable"  = "0"
    "time.synchronize.tools.startup" = "0"
    "tools.syncTime"                 = "0"
    "virtualhw.version"              = 13
  }
  vmx_data_post = {
    "ide0:0.present" = "FALSE"
  }
  vnc_disable_password = true
  vnc_over_websocket   = true
  vnc_port_max         = 5980
  vnc_port_min         = 5900
}

build {
  sources = ["source.vmware-iso.autogenerated_1"]

  provisioner "shell" {
    environment_vars  = ["HOME_DIR=/home/vagrant"]
    execute_command   = "echo 'vagrant' | {{ .Vars }} sudo -S -E sh -eux '{{ .Path }}'"
    expect_disconnect = true
    scripts           = ["${path.root}/scripts/update.sh", "${path.root}/_common/motd.sh", "${path.root}/_common/sshd.sh", "${path.root}/scripts/networking.sh", "${path.root}/scripts/sudoers.sh", "${path.root}/scripts/vagrant.sh", "${path.root}/scripts/vmware.sh", "${path.root}/scripts/cleanup.sh"]
  }

}
