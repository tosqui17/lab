#! /usr/bin/python3                                                                                                                    

from pyVim.connect import SmartConnect, Disconnect
from pyVmomi import vim, vmodl
import requests.packages.urllib3 as urllib3
import ssl
import atexit
import sys
import socket
import json

MAX_DEPTH = 12
SSH_PORT = 22

host = '192.168.174.131'
user = 'root' 
pwd = 'R00t@123'
domain = 'localhost.localdomain' 


def set_user(_user):
    global user
    user = _user
def set_host(_host):
    global host
    host = _host
def set_pwd(_pwd):
    global pwd
    pwd = _pwd
def set_domain(_domain):
    global domain
    domain = _domain

def connect():
    context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
    context.verify_mode = ssl.CERT_NONE
    connection = SmartConnect(host=host, user=user, pwd=pwd, port=443, sslContext=context)
    atexit.register(Disconnect, connection)
    content = connection.RetrieveContent()
    return content

def get_obj(content, vimtype, name):
    """
    Return an object by name, if name is None the
    first found object is returned
    """
    obj = None
    container = content.viewManager.CreateContainerView(content.rootFolder, vimtype, True)
    for c in container.view:
        if name:
            if c.name == name:
                obj = c
                break
        else:
            obj = c
            break

    container.Destroy()
    return obj

def enable_ssh():
    a_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    location = (host, SSH_PORT)
    result_of_check = a_socket.connect_ex(location)
    if result_of_check == 0:
        print("SSH already enabled")
    else:
        esxi_connection = connect()
        host_system = get_obj(esxi_connection, [vim.HostSystem],domain)
        service_system = host_system.configManager.serviceSystem
        ssh_service = [x for x in service_system.serviceInfo.service if x.key == 'TSM-SSH'][0]
        service_system.Start(ssh_service.key)
        result_of_check = a_socket.connect_ex(location)
        if result_of_check == 0:
            print("SSH enabled")
        else:
            print('Something goes wrong, SSH not enabled')
    a_socket.close()

def disable_ssh():
    a_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    location = (host, SSH_PORT)
    result_of_check = a_socket.connect_ex(location)
    if result_of_check != 0:
        print("SSH already closed")
    else:
        esxi_connection = connect()
        host_system = get_obj(esxi_connection, [vim.HostSystem],domain)
        service_system = host_system.configManager.serviceSystem
        ssh_service = [x for x in service_system.serviceInfo.service if x.key == 'TSM-SSH'][0]
        service_system.Stop(ssh_service.key)
        result_of_check = a_socket.connect_ex(location)
        if result_of_check != 0:
            print("SSH disabled")
        else:
            print('Something goes wrong, SSH enabled yet')
    a_socket.close()


def print_vminfo(vm, depth=1):
    if hasattr(vm, 'childEntity'):
        if depth > MAX_DEPTH:
            return
        vmlist = vm.childEntity
        for child in vmlist:
            print_vminfo(child, depth+1)
        return

    print('"'+vm.summary.config.name+'" '+':'+' [')
    print('\t"vmId" : ' '"'+str(vm.summary.vm)+'"')
    print('\t"vmPathName" : ' '"'+vm.summary.config.vmPathName+'",')
    print('\t"powerState" : ' '"'+vm.summary.runtime.powerState+'",')
    print('\t"memoryMB" : ' '"'+str(vm.summary.config.memorySizeMB)+'",')
    print('\t"storageGB" : ' '"'+str((vm.summary.storage.committed//1000000000))+'",')
    print('\t"numCpu" : ' '"'+str(vm.summary.config.numCpu)+'",')
    print('\t"uuid" : ' '"'+str(vm.summary.config.uuid)+'"')
    print('\t"ip" : ' '"'+str(vm.summary.guest.ipAddress)+'"')
    for i in range(len(vm.config.hardware.device)):
        if(isinstance(vm.config.hardware.device[i],vim.vm.device.VirtualVmxnet)):
            print('\t"'+vm.config.hardware.device[i].deviceInfo.label+'" : '+'"'+vm.config.hardware.device[i].deviceInfo.summary+'"')
        elif(isinstance(vm.config.hardware.device[i],vim.vm.device.VirtualEthernetCard)):
            print('\t"'+vm.config.hardware.device[i].deviceInfo.label+'" : '+'"'+vm.config.hardware.device[i].deviceInfo.summary+'"')
    print('\t]')
    

def vms_info():
    instance = connect()
    for child in instance.rootFolder.childEntity:
        if hasattr(child, 'vmFolder'):
            datacenter = child
            vmfolder = datacenter.vmFolder
            vmlist = vmfolder.childEntity
            print('{')
            if len(vmlist) == 0:
                print("}")
            else: 
                for vm in vmlist[:-1]:
                print_vminfo(vm)
                print(',')
            print_vminfo(vmlist[-1])
            print('}')

def power_on_all():
    instance=connect()
    obj_view = instance.viewManager.CreateContainerView(instance.rootFolder, [vim.VirtualMachine], True)
    vm_list = obj_view.view
    for vm in vm_list:
        vm.PowerOn()

def power_off_all():
    instance=connect()
    obj_view = instance.viewManager.CreateContainerView(instance.rootFolder, [vim.VirtualMachine], True)
    vm_list = obj_view.view
    for vm in vm_list:
        vm.PowerOff()

